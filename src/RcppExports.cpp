// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// CosineNormSparse
Eigen::SparseMatrix<double> CosineNormSparse(Eigen::SparseMatrix<double> data, bool display_progress);
RcppExport SEXP _scMatchmaker_CosineNormSparse(SEXP dataSEXP, SEXP display_progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::SparseMatrix<double> >::type data(dataSEXP);
    Rcpp::traits::input_parameter< bool >::type display_progress(display_progressSEXP);
    rcpp_result_gen = Rcpp::wrap(CosineNormSparse(data, display_progress));
    return rcpp_result_gen;
END_RCPP
}
// CosineNorm
Eigen::MatrixXd CosineNorm(Eigen::MatrixXd data, bool display_progress);
RcppExport SEXP _scMatchmaker_CosineNorm(SEXP dataSEXP, SEXP display_progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type data(dataSEXP);
    Rcpp::traits::input_parameter< bool >::type display_progress(display_progressSEXP);
    rcpp_result_gen = Rcpp::wrap(CosineNorm(data, display_progress));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_scMatchmaker_CosineNormSparse", (DL_FUNC) &_scMatchmaker_CosineNormSparse, 2},
    {"_scMatchmaker_CosineNorm", (DL_FUNC) &_scMatchmaker_CosineNorm, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_scMatchmaker(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
